package com.rtiming.shared.entry;

import java.util.Date;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

import com.rtiming.shared.common.database.sql.ParticipationBean;
import com.rtiming.shared.common.database.sql.RaceBean;
import com.rtiming.shared.settings.addinfo.AbstractAdditionalInformationFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 */
@Generated(value = "com.rtiming.client.entry.EntryForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class EntryFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public AdditionalInformationEntry getAdditionalInformationEntry() {
    return getFieldByClass(AdditionalInformationEntry.class);
  }

  public AdditionalInformationRunner getAdditionalInformationRunner() {
    return getFieldByClass(AdditionalInformationRunner.class);
  }

  public City getCity() {
    return getFieldByClass(City.class);
  }

  public Clazz getClazz() {
    return getFieldByClass(Clazz.class);
  }

  public Club getClub() {
    return getFieldByClass(Club.class);
  }

  public CurrencyUid getCurrencyUid() {
    return getFieldByClass(CurrencyUid.class);
  }

  /**
   * access method for property DownloadStationEntry.
   */
  public boolean isDownloadStationEntry() {
    return getDownloadStationEntryProperty().getValue() == null ? false : getDownloadStationEntryProperty().getValue();
  }

  /**
   * access method for property DownloadStationEntry.
   */
  public void setDownloadStationEntry(boolean downloadStationEntry) {
    getDownloadStationEntryProperty().setValue(downloadStationEntry);
  }

  public DownloadStationEntryProperty getDownloadStationEntryProperty() {
    return getPropertyByClass(DownloadStationEntryProperty.class);
  }

  public ECard getECard() {
    return getFieldByClass(ECard.class);
  }

  /**
   * access method for property EntryNr.
   */
  public Long getEntryNr() {
    return getEntryNrProperty().getValue();
  }

  /**
   * access method for property EntryNr.
   */
  public void setEntryNr(Long entryNr) {
    getEntryNrProperty().setValue(entryNr);
  }

  public EntryNrProperty getEntryNrProperty() {
    return getPropertyByClass(EntryNrProperty.class);
  }

  public Events getEvents() {
    return getFieldByClass(Events.class);
  }

  public EvtEntry getEvtEntry() {
    return getFieldByClass(EvtEntry.class);
  }

  public Fees getFees() {
    return getFieldByClass(Fees.class);
  }

  public FirstName getFirstName() {
    return getFieldByClass(FirstName.class);
  }

  public LastName getLastName() {
    return getFieldByClass(LastName.class);
  }

  public Races getRaces() {
    return getFieldByClass(Races.class);
  }

  public Registration getRegistration() {
    return getFieldByClass(Registration.class);
  }

  public Runner getRunner() {
    return getFieldByClass(Runner.class);
  }

  public Sex getSex() {
    return getFieldByClass(Sex.class);
  }

  public Year getYear() {
    return getFieldByClass(Year.class);
  }

  public static class AdditionalInformationEntry extends AbstractAdditionalInformationFieldData {

    private static final long serialVersionUID = 1L;

    @Override
    public AdditionalInformationEntryRowData addRow() {
      return (AdditionalInformationEntryRowData) super.addRow();
    }

    @Override
    public AdditionalInformationEntryRowData addRow(int rowState) {
      return (AdditionalInformationEntryRowData) super.addRow(rowState);
    }

    @Override
    public AdditionalInformationEntryRowData createRow() {
      return new AdditionalInformationEntryRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return AdditionalInformationEntryRowData.class;
    }

    @Override
    public AdditionalInformationEntryRowData[] getRows() {
      return (AdditionalInformationEntryRowData[]) super.getRows();
    }

    @Override
    public AdditionalInformationEntryRowData rowAt(int index) {
      return (AdditionalInformationEntryRowData) super.rowAt(index);
    }

    public void setRows(AdditionalInformationEntryRowData[] rows) {
      super.setRows(rows);
    }

    public static class AdditionalInformationEntryRowData extends AbstractAdditionalInformationRowData {

      private static final long serialVersionUID = 1L;
    }
  }

  public static class AdditionalInformationRunner extends AbstractAdditionalInformationFieldData {

    private static final long serialVersionUID = 1L;

    @Override
    public AdditionalInformationRunnerRowData addRow() {
      return (AdditionalInformationRunnerRowData) super.addRow();
    }

    @Override
    public AdditionalInformationRunnerRowData addRow(int rowState) {
      return (AdditionalInformationRunnerRowData) super.addRow(rowState);
    }

    @Override
    public AdditionalInformationRunnerRowData createRow() {
      return new AdditionalInformationRunnerRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return AdditionalInformationRunnerRowData.class;
    }

    @Override
    public AdditionalInformationRunnerRowData[] getRows() {
      return (AdditionalInformationRunnerRowData[]) super.getRows();
    }

    @Override
    public AdditionalInformationRunnerRowData rowAt(int index) {
      return (AdditionalInformationRunnerRowData) super.rowAt(index);
    }

    public void setRows(AdditionalInformationRunnerRowData[] rows) {
      super.setRows(rows);
    }

    public static class AdditionalInformationRunnerRowData extends AbstractAdditionalInformationRowData {

      private static final long serialVersionUID = 1L;
    }
  }

  public static class City extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Clazz extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Club extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class CurrencyUid extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class DownloadStationEntryProperty extends AbstractPropertyData<Boolean> {

    private static final long serialVersionUID = 1L;
  }

  public static class ECard extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class EntryNrProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Events extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public EventsRowData addRow() {
      return (EventsRowData) super.addRow();
    }

    @Override
    public EventsRowData addRow(int rowState) {
      return (EventsRowData) super.addRow(rowState);
    }

    @Override
    public EventsRowData createRow() {
      return new EventsRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return EventsRowData.class;
    }

    @Override
    public EventsRowData[] getRows() {
      return (EventsRowData[]) super.getRows();
    }

    @Override
    public EventsRowData rowAt(int index) {
      return (EventsRowData) super.rowAt(index);
    }

    public void setRows(EventsRowData[] rows) {
      super.setRows(rows);
    }

    public static class EventsRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String participationBean = "participationBean";
      public static final String eventNr = "eventNr";
      public static final String eventClass = "eventClass";
      public static final String startTime = "startTime";
      private ParticipationBean m_participationBean;
      private Long m_eventNr;
      private Long m_eventClass;
      private Date m_startTime;

      public ParticipationBean getParticipationBean() {
        return m_participationBean;
      }

      public void setParticipationBean(ParticipationBean newParticipationBean) {
        m_participationBean = newParticipationBean;
      }

      public Long getEventNr() {
        return m_eventNr;
      }

      public void setEventNr(Long newEventNr) {
        m_eventNr = newEventNr;
      }

      public Long getEventClass() {
        return m_eventClass;
      }

      public void setEventClass(Long newEventClass) {
        m_eventClass = newEventClass;
      }

      public Date getStartTime() {
        return m_startTime;
      }

      public void setStartTime(Date newStartTime) {
        m_startTime = newStartTime;
      }
    }
  }

  public static class EvtEntry extends AbstractValueFieldData<Date> {

    private static final long serialVersionUID = 1L;
  }

  public static class Fees extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public FeesRowData addRow() {
      return (FeesRowData) super.addRow();
    }

    @Override
    public FeesRowData addRow(int rowState) {
      return (FeesRowData) super.addRow(rowState);
    }

    @Override
    public FeesRowData createRow() {
      return new FeesRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return FeesRowData.class;
    }

    @Override
    public FeesRowData[] getRows() {
      return (FeesRowData[]) super.getRows();
    }

    @Override
    public FeesRowData rowAt(int index) {
      return (FeesRowData) super.rowAt(index);
    }

    public void setRows(FeesRowData[] rows) {
      super.setRows(rows);
    }

    public static class FeesRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String name = "name";
      public static final String amount = "amount";
      public static final String currency = "currency";
      public static final String cashPaymentOnRegistration = "cashPaymentOnRegistration";
      private String m_name;
      private Double m_amount;
      private Long m_currency;
      private Boolean m_cashPaymentOnRegistration;

      public String getName() {
        return m_name;
      }

      public void setName(String newName) {
        m_name = newName;
      }

      public Double getAmount() {
        return m_amount;
      }

      public void setAmount(Double newAmount) {
        m_amount = newAmount;
      }

      public Long getCurrency() {
        return m_currency;
      }

      public void setCurrency(Long newCurrency) {
        m_currency = newCurrency;
      }

      public Boolean getCashPaymentOnRegistration() {
        return m_cashPaymentOnRegistration;
      }

      public void setCashPaymentOnRegistration(Boolean newCashPaymentOnRegistration) {
        m_cashPaymentOnRegistration = newCashPaymentOnRegistration;
      }
    }
  }

  public static class FirstName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class LastName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;
  }

  public static class Races extends AbstractTableFieldBeanData {

    private static final long serialVersionUID = 1L;

    @Override
    public RacesRowData addRow() {
      return (RacesRowData) super.addRow();
    }

    @Override
    public RacesRowData addRow(int rowState) {
      return (RacesRowData) super.addRow(rowState);
    }

    @Override
    public RacesRowData createRow() {
      return new RacesRowData();
    }

    @Override
    public Class<? extends AbstractTableRowData> getRowType() {
      return RacesRowData.class;
    }

    @Override
    public RacesRowData[] getRows() {
      return (RacesRowData[]) super.getRows();
    }

    @Override
    public RacesRowData rowAt(int index) {
      return (RacesRowData) super.rowAt(index);
    }

    public void setRows(RacesRowData[] rows) {
      super.setRows(rows);
    }

    public static class RacesRowData extends AbstractTableRowData {

      private static final long serialVersionUID = 1L;
      public static final String raceNr = "raceNr";
      public static final String runnerNr = "runnerNr";
      public static final String clubNr = "clubNr";
      public static final String lastName = "lastName";
      public static final String firstName = "firstName";
      public static final String eCard = "eCard";
      public static final String bibNumber = "bibNumber";
      public static final String legStartTime = "legStartTime";
      public static final String leg = "leg";
      public static final String nation = "nation";
      public static final String raceEvent = "raceEvent";
      public static final String raceFormButton = "raceFormButton";
      public static final String raceBean = "raceBean";
      private Long m_raceNr;
      private Long m_runnerNr;
      private Long m_clubNr;
      private String m_lastName;
      private String m_firstName;
      private Long m_eCard;
      private String m_bibNumber;
      private Date m_legStartTime;
      private Long m_leg;
      private Long m_nation;
      private Long m_raceEvent;
      private String m_raceFormButton;
      private RaceBean m_raceBean;

      public Long getRaceNr() {
        return m_raceNr;
      }

      public void setRaceNr(Long newRaceNr) {
        m_raceNr = newRaceNr;
      }

      public Long getRunnerNr() {
        return m_runnerNr;
      }

      public void setRunnerNr(Long newRunnerNr) {
        m_runnerNr = newRunnerNr;
      }

      public Long getClubNr() {
        return m_clubNr;
      }

      public void setClubNr(Long newClubNr) {
        m_clubNr = newClubNr;
      }

      public String getLastName() {
        return m_lastName;
      }

      public void setLastName(String newLastName) {
        m_lastName = newLastName;
      }

      public String getFirstName() {
        return m_firstName;
      }

      public void setFirstName(String newFirstName) {
        m_firstName = newFirstName;
      }

      public Long getECard() {
        return m_eCard;
      }

      public void setECard(Long newECard) {
        m_eCard = newECard;
      }

      public String getBibNumber() {
        return m_bibNumber;
      }

      public void setBibNumber(String newBibNumber) {
        m_bibNumber = newBibNumber;
      }

      public Date getLegStartTime() {
        return m_legStartTime;
      }

      public void setLegStartTime(Date newLegStartTime) {
        m_legStartTime = newLegStartTime;
      }

      public Long getLeg() {
        return m_leg;
      }

      public void setLeg(Long newLeg) {
        m_leg = newLeg;
      }

      public Long getNation() {
        return m_nation;
      }

      public void setNation(Long newNation) {
        m_nation = newNation;
      }

      public Long getRaceEvent() {
        return m_raceEvent;
      }

      public void setRaceEvent(Long newRaceEvent) {
        m_raceEvent = newRaceEvent;
      }

      public String getRaceFormButton() {
        return m_raceFormButton;
      }

      public void setRaceFormButton(String newRaceFormButton) {
        m_raceFormButton = newRaceFormButton;
      }

      public RaceBean getRaceBean() {
        return m_raceBean;
      }

      public void setRaceBean(RaceBean newRaceBean) {
        m_raceBean = newRaceBean;
      }
    }
  }

  public static class Registration extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Runner extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Sex extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }

  public static class Year extends AbstractValueFieldData<Long> {

    private static final long serialVersionUID = 1L;
  }
}
